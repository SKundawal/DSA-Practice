import java.util.*;

public class Main {
    static int count;
    public static void main(String[] args) {
        int distance = 3;
//        Integer treeNodes[] = {91,100,27,69,44,6,71,50,71,41,20,72,38,76,32,99,27,11,13,52,99,33,10,75,61,22,53,94,54,38,90,18,5,85,62,89,65,75,8,52,5,44,96,98,95,87,88,78,99,71,85,78,43,26,9,64,7,83,47,60,28,11,24,95,6,87,23,47,42,81,12,75,80,81,9,28,23,67,79,55,80,36,31,80,3,40,73,34,11,30,72,42,80,19,77,21,60,65,12,60,29,15,93,34,15,20,2,46,34,51,68,40,38,76,19,33,33,58,4,68,80,70,43,41,99,88,51,23,39,98,21,66,80,95,88,12,46,7,86,61,11,47,83,30,87,87,76,65,39,97,16,69,29,22,95,65,15,29,74,51,91,2,62,87,93,35,70,46,99,77,54,63,79,83,59,57,41,4,98,80,63,16,68,76,83,53,42,16,65,50,62,84,53,38,88,3,57,89,48,98,18,56,13,67,63,66,71,86,78,82,45,37,79,85,24,21,32,93,9,14,78,92,12,92,28,62,8,97,71,63,78,31,6,96,15,6,33,75,75,4,28,64,62,11,59,51,25,96,52,1,4,77,44,99,25,75,80,87,7,62,28,49,50,43,44,38,48,39,55,69,14,53,43,31,61,59,11,16,65,26,37,23,5,53,47,100,77,23,76,89,74,25,10,31,79,52,89,21,3,60,29,89,27,63,99,80,85,17,52,2,73,10,90,25,73,80,84,45,44,19,44,30,54,12,43,97,22,65,96,25,18,13,25,51,10,21,62,15,24,27,39,33,45,58,4,94,9,39,34,16,56,85,65,38,3,65,80,83,6,35,72,61,71,66,34,54,19,18,42,82,56,31,17,49,13,22,48,18,31,74,93,5,46,41,89,3,12,81,51,83,46,28,65,54,90,55,35,44,31,74,67,43,5,66,91,82,76,75,70,12,2,95,38,67,70,38,24,42,40,30,98,93,89,31,32,10,5,53,3,27,19,64,61,82,93,30,84,76,85,91,99,43,59,59,47,32,17,48,57,23,51,43,47,78,59,63,92,74,60,37,64,57,29,25,38,64,37,72,15,67,92,33,8,84,76,35,41,57,91,90,57,90,25,43,94,38,97,90,13,94,45,10,24,27,44,100,56,56,86,10,44,99,96,39,72,96,36,50,97,64,72,96,53,51,72,47,94,84,56,34,58,50,75,96,59,84,28,64,81,41,100,36,49,79,61,3,11,43,82,19,42,61,15,48,94,65,2,7,99,18,2,7,36,22,14,9,90,49,92,38,47,64,50,81,75,95,26,84,82,66,67,44,79,90,79,23,39,2,67,78,11,28,80,31,12,72,91,55,75,70,96,71,73,73,1,67,65,81,1,47,10,36,52,29,60,39,96,72,68,88,17,49,93,70,50,17,28,45,80,9,58,99,35,27,60,77,31,22,76,18,87,28,8,65,46,34,66,17,27,12,10,58,36,89,59,18,33,89,55,52,98,88,50,40,32,54,53,48,40,73,10,17,65,92,11,94,87,20,75,6,35,72,61,71,66,34,54,19,18,42,82,56,31,17,49,13,22,48,18,31,74,93,5,46,41,89,3,12,81,51,83,46,28,65,54,90,55,35,44,31,74,67,43,5,66,91,82,76,75,70,12,2,95,38,67,70,38,24,42,40,30,98,93,89,31,32,10,5,53,3,27,19,64,61,82,93,30,84,76,85,91,99,43,59,59,47,32,17,48,57,23,51,43,47,78,59,63,92,74,60,37,64,57,29,25,38,64,37,72,15,67,92,33,8,84,76,35,41,57,91,52,98,88,50,40,32,54,53,48,40,73,10,17,65,92,11,94,87,20,75,6,35,72,61,71,66,34,54,19,18,42,82,71,50,71,41,20,72,38,76,32,99,27,11,13,52,99,33,10,75,61,22,53,94,54,38,90,18,5,85,62,89,65,75,8,52,5,44,96,98,95,87,88,78,99,71,85,78,43,26,9,64,7,83,47,60,28,11,24,95,6,87,23,47,42,81,12,75,80,81,9,28,23,67,79,55,80,36,31,50,71,41,20,72,38,76,32,99,27,11,13,52,99,33,10,75,61,22,53,94,54,38,90,18,5,85,62,89,65,75,8,52,5,44,96,98,95,87,88,78,99,71,85,78,43,26,9,64,7,83,47,60,28,11,24,95,6,87,23,47,42,81,12,75,80,81,9,28,23,67,15,20,72,42,80,19,77,21,60,65,12,60,29,15,93,34,15,20,2,46,34,51,68,40,38,76,19,33,33,58,4,68,81,12,75,80,81,9,28,23,67,72,42,80,80,70,43,41,99,88,51,23,39,98};
        Integer treeNodes[] = {1,2,3,null,4};
        TreeNode root = TreeNode.generateTree(treeNodes);
        System.out.println(countPairs(root, distance));
    }

    public static int countPairs(TreeNode root, int distance) {
        count = 0;
        f(root, distance);
        return count;
    }

    public static List<Integer> f(TreeNode root, int distance){
        if(root == null){
            return new ArrayList<>();
        }

        if(root.left == null && root.right == null){
            return new ArrayList<>(List.of(1));
        }

        List<Integer> leftList = f(root.left, distance);
        List<Integer> rightList = f(root.right, distance);

        for(int lDist : leftList){
            if(lDist > distance) continue;

            for(int rDist : rightList){
                if(lDist + rDist <= distance){
                    count++;
                }
            }
        }

        List<Integer> mergedList = new ArrayList<>();
        for(int lDist : leftList) mergedList.add(lDist + 1);
        for(int rDist : rightList) mergedList.add(rDist + 1);

        return mergedList;
    }
}